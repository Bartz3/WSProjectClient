 @page "/"
 @using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
 @using ServiceReference1
 @using WSProjectClient.Controllers
@using WSProjectClient.Data
 @inject ProtectedSessionStorage ProtectedSessionStore
 @inject Blazored.SessionStorage.ISessionStorageService session

 <PageTitle>Users</PageTitle>

 <h1>Hello, world!</h1>
 @{
     <button class="btn btn-primary" @onclick="GetSessionUser" type="button">GetUser</button>

    if (userStorage != null)
    {
        <h1>Zalogowano jako</h1>
        <p>@userStorage.Username (@userStorage.UserId)</p>
 
    }
     <table class="table table-striped table-bordered">
         <thead class="thead-dark">
             <tr>
                 <th>Id</th>
                 <th>Username</th>
                 <th>Email</th>
             </tr>
         </thead>
         <tbody>
             @if (users == null)
             {
                 <p>Ładowanie...</p>
             }
             else
             {
                 @foreach (var item in users.OrderBy(x=>x.Id))
                 {
                     <tr>
                         <td>@item.Id</td>
                         <td>@item.Username</td>
                         <td>@item.Email</td>
                     </tr>
                 }
             }
         </tbody>
     </table>

     // <button @onclick="Test"></button>
 }

@code {
    UserController us = new UserController();
    user[] users;
    public UserInfo userStorage;

    public async Task GetSessionUser()
    {
        userStorage = await session.GetItemAsync<UserInfo>("SessionUser");
    }

    protected override async Task OnInitializedAsync()
    {
        users = await us.GetUsers();
        // GetSessionData();
    }

    // public async Task GetSessionUser()
    // {
    //     userStorage = await session.GetItemAsync<UserInfo>("SessionUser");
    // }
    // public async Task GetSessionData()
    // {
    //     try
    //     {

    //         var userId = await ProtectedSessionStore.GetAsync<string>("userId");
    //         var email = await ProtectedSessionStore.GetAsync<string>("email");
    //     }
    //     catch (Exception ex)
    //     {
    //         // Obsłuż wyjątek lub zapisz informacje o błędzie do logów
    //         Console.WriteLine($"Wystąpił błąd podczas odczytywania danych sesji: {ex.Message}");
    //     }


    // // }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await GetSessionUser();
    //     if (firstRender)
    //     {
    //         // Wywołaj kod JavaScriptu po zakończeniu renderowania komponentu
    //         await GetSessionUser();
    //     }
    // }

 }
